using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using System.Text.Json;
using craftingFurnitureEXP.Settings;

namespace craftingFurnitureEXP
{
    public class Program
    {
        private static Lazy<SynthesisSettings> _Settings = null!;
        public static SynthesisSettings SyenthesisSetting => _Settings.Value;
        public static EditorIDLists? EditrorIDs;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "CraftingFurnitureEXP.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Console.WriteLine("Getting Premade keyword lists.");
            EditrorIDs = BuildEditorIDList(state.DataFolderPath);
            Console.WriteLine("Combining Keywords Lists.");
            EditrorIDs!.ImportSettings(SyenthesisSetting);
            Console.WriteLine("Combined Keywords Lists.");

            if (EditrorIDs.IsEmpty())
            {
                Console.WriteLine("No Keyword editorIDs found, no patches possable");
                return;
            }
            else if (SyenthesisSetting.logging.VerboseLogging)
            {
                Console.WriteLine();
                Console.WriteLine("Outputting Smithing Keyword EditrorIDs.");
                foreach(string keywordEDID in EditrorIDs.SmithingKeywords)
                {
                    Console.WriteLine(keywordEDID);
                }
                Console.WriteLine();

                Console.WriteLine("Outputting Alchemy Keyword EditrorIDs.");
                foreach (string keywordEDID in EditrorIDs.AlchemyKeywords)
                {
                    Console.WriteLine(keywordEDID);
                }
                Console.WriteLine();

                Console.WriteLine("Outputting Enchanting Keyword EditrorIDs.");
                foreach (string keywordEDID in EditrorIDs.EnchantingKeywords)
                {
                    Console.WriteLine(keywordEDID);
                }
                Console.WriteLine();
            }

            Dictionary<string, IKeywordGetter> keywords = new Dictionary<string, IKeywordGetter>();

            Console.WriteLine("Building Load Order Keywords List");
            foreach (var keywordGetter in state.LoadOrder.ListedOrder.Keyword().WinningOverrides())
            {
                keywords.TryAdd(keywordGetter.EditorID ?? "null", keywordGetter);
            }
            keywords.Remove("null");

            //keywords.TryGetValue("isCookingSpit", out keyword!)
            //state.LinkCache.TryResolve<IKeywordGetter>("isCookingSpit", out keyword!)

            if (SyenthesisSetting.logging.VerboseLogging && !SyenthesisSetting.logging.DetectedKeywordLogging)
            {
                foreach (var keyword in keywords)
                {
                    Console.WriteLine($"{keyword.Key} {keyword.Value.FormKey} detected as keyword.");
                }
            }
            Console.WriteLine($"Keyword list built. {keywords.Count} keywords found in load order.");
            Console.WriteLine();

            foreach (var FurnitureGetter in state.LoadOrder.PriorityOrder.Furniture().WinningOverrides())
            {
                if (IterateList(state, FurnitureGetter, keywords, EditrorIDs.SmithingKeywords, Skill.Smithing))
                {
                    continue;
                }
                if (IterateList(state, FurnitureGetter, keywords, EditrorIDs.AlchemyKeywords, Skill.Alchemy))
                {
                    continue;
                }
                if (IterateList(state, FurnitureGetter, keywords, EditrorIDs.EnchantingKeywords, Skill.Enchanting))
                {
                    continue;
                }
            }
        }

        public static bool IterateList(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, IFurnitureGetter furnitureGetter, 
            Dictionary<string, IKeywordGetter> keywords, List<string> editrorIDs, Skill skill)
        {
            IKeywordGetter keyword;

            foreach (string keywordEDID in editrorIDs)
            {
                if (keywords.TryGetValue(keywordEDID, out keyword!))
                {
                    if (furnitureGetter.HasKeyword(keyword))
                    {
                        if (furnitureGetter.WorkbenchData?.BenchType.HasFlag(WorkbenchData.Type.CreateObject) ?? false)
                        {
                            var furniture = state.PatchMod.Furniture.GetOrAddAsOverride(furnitureGetter);
                            furniture.WorkbenchData!.UsesSkill = skill;
                            Log($"{furniture.EditorID} {furniture.FormKey} crafting skill set to {Enum.GetName(typeof(Skill), skill)}", SyenthesisSetting.logging.VerboseLogging);
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        public static EditorIDLists BuildEditorIDList(string dataFolder)
        {
            IEnumerable<string> files = Directory.EnumerateFiles(dataFolder, "*_premadeList.json");
            if(!files.Any())
            {
                Console.WriteLine("No pre-made keywords list found in datafolder and ending with \"_premadeList.json\" without \".");
                return new EditorIDLists();
            }
            
            EditorIDLists editorIDLists = new();
            foreach (string file in files)
            {
                try
                {
                    editorIDLists.ImportSettings(JsonSerializer.Deserialize<EditorIDLists>(File.ReadAllText(file))!);
                }
                catch (Exception)
                {
                    Console.WriteLine($"Premade list \"{Path.GetFileName(file)}\", is empty or formatted incorrectly");
                }
            }
            return editorIDLists;
        }

        public static void Log(string line, bool log = true)
        {
            if (log)
            {
                Console.WriteLine(line);
            }
        }
    }
}
